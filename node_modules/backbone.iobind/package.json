{
  "author": {
    "name": "Jake Luer",
    "email": "@jakeluer"
  },
  "name": "backbone.iobind",
  "description": "Bind socket.io events to backbone models & collections.",
  "version": "0.4.3",
  "homepage": "http://logicalparadox.github.com/backbone.iobind",
  "repository": {
    "type": "git",
    "url": "git://github.com/logicalparadox/backbone.iobind.git"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {},
  "devDependencies": {
    "codex": "0.0.x",
    "folio": "0.2.x",
    "seed": "0.1.x",
    "colors": "0.6.x",
    "express": "2.5.x",
    "socket.io": "0.8.x",
    "jade": "0.20.x",
    "stylus": "0.22.x",
    "nib": "0.3.x",
    "fez": "0.0.x",
    "backbone": "0.5.x",
    "underscore": "1.2.x"
  },
  "readme": "# Backbone.ioBind\n\nBackbone.ioBind allows you to bind socket.io events to backbone model & collection events.\nAlso includes `backbone.iosync.js`, a drop in replacement for `Backbone.sync` that uses socket.io.\n\nYour best best for starting is to check out the [API Documentation](http://alogicalparadox.com/backbone.iobind/).\n\n#### Quick Links\n\n* [Example App Installation](http://alogicalparadox.com/backbone.iobind/index.html#exampleapp)\n* [Google Group](https://groups.google.com/group/backboneiobind)\n* [Changelog](https://github.com/logicalparadox/backbone.iobind/blob/master/History.md)\n\n#### Dependancies\n\n* [Socket.io](http://socket.io/) 0.7.x || 0.8.x\n* [Backbone](http://documentcloud.github.com/backbone/) 0.5.x\n\n### Usage\n\nDownload and include in your projects.\n\n```html\n<script src=\"/js/backbone.iosync.js\"></script>\n<script src=\"/js/backbone.iobind.js\"></script>\n```\n\nOr use the minimized versions.\n\n```html\n<script src=\"/js/backbone.iosync.min.js\"></script>\n<script src=\"/js/backbone.iobind.min.js\"></script>\n```\n\n### Where to Get Help\n\nPlease post issues to [GitHub Issues](https://github.com/logicalparadox/backbone.iobind/issues).\nCommunity forum is available at the [Google Group](https://groups.google.com/group/backboneiobind).\n\n## Using the Backbone.sync Replacement for Socket.io\n\nThe Backbone.sync replacement, `backbone.iosync.js`, is a drop-in replacement for Backbone.sync that\nwill make Backbone use socket.io for all normal CRUD operations. By this, anytime you `save` a model,\n`fetch` a collection, `remove` a model, or other database operation, socket.io will be used as the\ntransport.\n\n### Namespaces / Urls\n\nBackbone has a dedicated attribute, `urlRoot` for models, and `url` for collections, that is used\nby the default sync method to direct AJAX request. ioSync uses this same attribute to create a\nnamespace tag for that model.\n\n*For Example:* If your collection url is 'posts' or '/posts', the events to listen for server-side will be:\n\n* `posts:create`\n* `posts:read`\n* `posts:update`\n* `posts:delete`\n\nAs with the default sync method, for a given model, ioSync will default to the `url` of the collection\nthat model is a part of, else it will use the models `urlRoot`.\n\nIf your url has a depth of more than one, only the first will be used. Example: `/posts/comments` will still only have a namespace of `posts`.*\n\n### RPC / Callbacks\n\nThis replacement assumes that you are using socket.io's RPC (callback) formula for these events.\nExamine this psuedo-code:\n\n```js\nsocket.on('posts:read', function (data, callback) {\n  db.query({_id: data.id}, function (err, model) {\n    if (err) {\n      callback(err);\n    } else {\n      // ... some data scrubbing\n      callback(null, model);\n    }\n  });\n});\n```\n\nThe callback accepts two parameters: `error` and `model`. If no error has occurred, send `null` for `error`.\n\nThe `model` should be a JSON representation of the client-side model's attributes.\n\n## Using Backbone.ioBind for Custom Events\n\nThe primary function for Backbone.ioBind is to make it easy to create client-side listeners\nfor server-side socket.io events. The most likely use case for this is to broadcast changes\nmade by one client to all other clients watching a particular data object.\n\nThe example app demonstrates a very basic usage scenario. If you would like to see specific code\nexamples, please check out the\n[wiki page on using the example app](http://alogicalparadox.com/backbone.iobind/index.html#exampleapp).\n\n### ioBind\n\nThe ioBind function is available for both Models and Collections, and behaves almost identically in both scenarios\n\n```js\n// Example Model.extend\nurlRoot: 'todo',\ninitialize: function () {\n  _.bindAll(this, 'serverChange', 'serverDelete', 'modelCleanup');\n  this.ioBind('update', window.socket, this.serverChange, this);\n  this.ioBind('delete', window.socket, this.serverDelete, this);\n}\n\n// Example Collection.exend\nurl: 'todos',\ninitialize: function () {\n  _.bindAll(this, 'serverCreate', 'collectionCleanup');\n  this.ioBind('create', window.socket, this.serverCreate, this);\n}\n```\n\nThe primary difference between `ioBind` on Models and Collection is the event string that is listened for.\nOn models, the event string includes the Model `id`, whereas on collection it is simply the collection namespace.\n\nThe above example will respond to the following socket.io events.\n\n```js\n// Model events\nsocket.emit('todo/' + todo_obj.id + ':update', todo_obj);\nsocket.emit('todo/' + todo_obj.id + ':delete', todo_obj);\n\n// Collection events\nsocket.emit('todos:create', todo_obj);\n```\n\n### Usage Guidelines\n\n*Model binding without ID:* Do NOT bind to Models that do NOT have an `id` assigned. This will cause for extra listeners\nand cause potentially large memory leak problems. See the example app for one possible workaround.\n\n*Namespace construction:* When constructing the namespace, as with the the ioSync method, for a given model ioBind\nwill default to the `url` of the collectionthat model is a part of, else it will use the models `urlRoot`.\n\n*Reserved events:* Do NOT bind to reserved backbone events, such as `change`, `remove`, and `add`. Proxy these\nevents using different event tags such as `update`, `delete`, and `create`.\n\n## Building\n\nClone this repo:\n\n`$ git clone https://github.com/logicalparadox/backbone.iobind`\n\nInstall development/build dependancies (Ie: [folio](https://github.com/logicalparadox/folio)).:\n\n`$ npm install`\n\nRun make\n\n`$ make`\n\n#### Example Tasks Application\n\nThere is an example application demonstrating the basics of using the\n`ioSync` and `ioBind` components. It is a tasks application that will keep itself syncronized across all open\nbrowser instances. The foundation is an [Express](https://github.com/visionmedia/express)\nserver using [Seed](https://github.com/logicalparadox/seed) as an in-memory data store.\n\nThe app is found in the `example` folder.\nView the [Documentation Article](http://alogicalparadox.com/backbone.iobind/index.html#exampleapp)\non the example app for instructions on how to get everything set up.\n\nIn short, run `node example/app.js` from the root directory.\n\n## Protip\n\nWorks great with the awesome [backbone.modelbinding](https://github.com/derickbailey/backbone.modelbinding).\n\n## Contributors\n\nInterested in contributing? Fork to get started. Contact [@logicalparadox](http://github.com/logicalparadox) if you are interested in being regular contributor.\n\n* Jake Luer [[Github: @logicalparadox](http://github.com/logicalparadox)] [[Twitter: @jakeluer](http://twitter.com/jakeluer)] [[Website](http://alogicalparadox.com)]\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Jake Luer <jake@alogicalparadox.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "backbone.iobind@0.4.3",
  "dist": {
    "shasum": "b124cd8a4cbd65f8274da3fb80ee03d005ace9b5"
  },
  "_from": "backbone.iobind@",
  "_resolved": "https://registry.npmjs.org/backbone.iobind/-/backbone.iobind-0.4.3.tgz"
}
